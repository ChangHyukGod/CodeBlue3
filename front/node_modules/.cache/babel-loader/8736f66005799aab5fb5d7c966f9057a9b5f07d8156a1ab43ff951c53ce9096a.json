{"ast":null,"code":"import EmpService from \"@/services/basic/EmpService\";\nexport default {\n  data() {\n    return {\n      pageIndex: 1,\n      // 현재페이지번호\n      totalCount: 0,\n      // 전체개수\n      recodeCountPerPage: 3,\n      // 화면에보일개수\n      searchKeyword: \"\",\n      // 검색어\n      emps: [] // 빈배열(json)\n    };\n  },\n  methods: {\n    // 함수작성\n    async getEmp() {\n      try {\n        let response = await EmpService.getAll(this.searchKeyword, this.pageIndex - 1, this.recodeCountPerPage);\n        // TODO: 벡엔드 전송되는것: results(배열), totalCount(총개수)\n        const {\n          results,\n          totalCount\n        } = response.data;\n        console.log(response.data); // 디버깅\n        this.emps = results;\n        this.totalCount = totalCount;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  },\n  //   화면이 뜰때 자동실행 함수\n  mounted() {\n    this.getEmp();\n  }\n};","map":{"version":3,"names":["EmpService","data","pageIndex","totalCount","recodeCountPerPage","searchKeyword","emps","methods","getEmp","response","getAll","results","console","log","error","mounted"],"sources":["D:\\Work\\10_Springboot\\04_Login\\frontend\\src\\views\\basic\\emp\\EmpView.vue"],"sourcesContent":["// 연습 1) views/basic/emp/EmpView.vue // vueInit (메뉴 달기) 화면에 보이기 //\r\n메뉴등록 : router/index.js // url (HeaderCom.vue(머리말)) : /emp (사원) // url\r\n(HeaderCom.vue(머리말)) : /add-emp (사원추가) // 연습 2) 테이블 디자인 , 화면에\r\n표시 // 데이터 (반복문까지 출력 : emps(빈배열)) // services/basic/EmpService.js\r\n: // getAll(searchKeyword, pageIndex, recordCountPerPage) (전체조회)\r\n<template>\r\n  <div>\r\n    <!-- TODO: 검색어 입력상자 -->\r\n    <div class=\"input-group mb-3\">\r\n      <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        placeholder=\"검색어\"\r\n        v-model=\"searchKeyword\"\r\n      />\r\n      <button class=\"btn btn-outline-secondary\" type=\"button\" @click=\"getEmp\">\r\n        검색\r\n      </button>\r\n    </div>\r\n    <!-- TODO: 부트스트랩 테이블(사원) -->\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">eno</th>\r\n          <th scope=\"col\">ename</th>\r\n          <th scope=\"col\">job</th>\r\n          <th scope=\"col\">manager</th>\r\n          <th scope=\"col\">hiredate</th>\r\n          <th scope=\"col\">salary</th>\r\n          <th scope=\"col\">commission</th>\r\n          <th scope=\"col\">dno</th>\r\n          <th scope=\"col\">action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <!-- TODO: 반복문 : emps -->\r\n        <tr v-for=\"(data, index) in emps\" :key=\"index\">\r\n          <td>{{ data.eno }}</td>\r\n          <td>{{ data.ename }}</td>\r\n          <td>{{ data.job }}</td>\r\n          <td>{{ data.manager }}</td>\r\n          <td>{{ data.hiredate }}</td>\r\n          <td>{{ data.salary }}</td>\r\n          <td>{{ data.commission }}</td>\r\n          <td>{{ data.dno }}</td>\r\n          <td>\r\n            <!-- a태그, router-link태그 -->\r\n            <router-link :to=\"'/emp/' + data.eno\">\r\n              <span class=\"badge text-bg-success\">수정</span>\r\n            </router-link>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <!-- TODO: 페이지 번호 : 부트스트랩뷰(페이지) -->\r\n    <div>\r\n      <b-pagination\r\n        v-model=\"pageIndex\"\r\n        :total-rows=\"totalCount\"\r\n        :per-page=\"recodeCountPerPage\"\r\n        @click=\"getEmp\"\r\n      ></b-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport EmpService from \"@/services/basic/EmpService\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      pageIndex: 1, // 현재페이지번호\r\n      totalCount: 0, // 전체개수\r\n      recodeCountPerPage: 3, // 화면에보일개수\r\n      searchKeyword: \"\", // 검색어\r\n      emps: [], // 빈배열(json)\r\n    };\r\n  },\r\n  methods: {\r\n    // 함수작성\r\n    async getEmp() {\r\n      try {\r\n        let response = await EmpService.getAll(\r\n          this.searchKeyword,\r\n          this.pageIndex - 1,\r\n          this.recodeCountPerPage\r\n        );\r\n        // TODO: 벡엔드 전송되는것: results(배열), totalCount(총개수)\r\n        const { results, totalCount } = response.data;\r\n        console.log(response.data); // 디버깅\r\n        this.emps = results;\r\n        this.totalCount = totalCount;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n  },\r\n  //   화면이 뜰때 자동실행 함수\r\n  mounted() {\r\n    this.getEmp();\r\n  },\r\n};\r\n</script>\r\n<style></style>\r\n"],"mappings":"AAkEA,OAAOA,UAAS,MAAO,6BAA6B;AACpD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,CAAC;MAAE;MACdC,UAAU,EAAE,CAAC;MAAE;MACfC,kBAAkB,EAAE,CAAC;MAAE;MACvBC,aAAa,EAAE,EAAE;MAAE;MACnBC,IAAI,EAAE,EAAE,CAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,MAAMA,CAAA,EAAG;MACb,IAAI;QACF,IAAIC,QAAO,GAAI,MAAMT,UAAU,CAACU,MAAM,CACpC,IAAI,CAACL,aAAa,EAClB,IAAI,CAACH,SAAQ,GAAI,CAAC,EAClB,IAAI,CAACE,kBACP,CAAC;QACD;QACA,MAAM;UAAEO,OAAO;UAAER;QAAW,IAAIM,QAAQ,CAACR,IAAI;QAC7CW,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACR,IAAI,CAAC,EAAE;QAC5B,IAAI,CAACK,IAAG,GAAIK,OAAO;QACnB,IAAI,CAACR,UAAS,GAAIA,UAAU;MAC9B,EAAE,OAAOW,KAAK,EAAE;QACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MACpB;IACF;EACF,CAAC;EACD;EACAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACP,MAAM,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}